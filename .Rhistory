CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
fortify(SurvProb)
SurvProbcalc <-
tibble::tibble(
time = SurvProb$time,
n.risk = SurvProb$n.risk,
n.censor = SurvProb$n.censor,
n.event = SurvProb$n.event,
survival = SurvProb$surv
)
sum(SurvProbcalc$n.event)
sum(SurvProbcalc$n.censor)
min(which(SurvProbcalc$n.censor != 0))
library(survival)
library(survminer)
library(lubridate)
library(ggfortify)
# Create a censor indicator variable that is 1 if the employee has left and 0 otherwise
TurnData <-
TurnData %>%
dplyr::mutate(
CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
summary(fortify(SurvProb), 10)
SurvProbcalc <-
tibble::tibble(
time = SurvProb$time,
n.risk = SurvProb$n.risk,
n.censor = SurvProb$n.censor,
n.event = SurvProb$n.event,
survival = SurvProb$surv
)
sum(SurvProbcalc$n.event)
sum(SurvProbcalc$n.censor)
min(which(SurvProbcalc$n.censor != 0))
library(survival)
library(survminer)
library(lubridate)
library(ggfortify)
# Create a censor indicator variable that is 1 if the employee has left and 0 otherwise
TurnData <-
TurnData %>%
dplyr::mutate(
CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
head(fortify(SurvProb),10)
SurvProbcalc <-
tibble::tibble(
time = SurvProb$time,
n.risk = SurvProb$n.risk,
n.censor = SurvProb$n.censor,
n.event = SurvProb$n.event,
survival = SurvProb$surv
)
sum(SurvProbcalc$n.event)
sum(SurvProbcalc$n.censor)
min(which(SurvProbcalc$n.censor != 0))
SurvProb_Coach <- survival::survfit(surv_object ~ Coach, data = TurnData)
head(fortify(SurvProb_Coach), 10)
install.packages("usethis")
usethis::use_git_config(user.name = "MattSwan", user.email = "mattswnsn53@gmail.com")
usethis::use_git_config(user.name = "MattSwan", user.email = "mattswnsn53@gmail.com")
library(readxl)
library(dplyr)
Data <- read_excel("C:/Users/matts/Desktop/WebsiteData/Data/Religion Data 2.xlsx")
Data <- subset(Data, PARTYID!= 1 & PARTYID!= 2 & PARTYID!= 3 & PARTYID!= 4 & PARTYID!= 5 & PARTYID!= 9)
Data <- subset(Data, ATTEND!= 9)
Data %>%
mutate(RACECEN1 = case_when(RACECEN1 == 1 ~ 1,
RACECEN1 ==2 ~ 2,
RACECEN1 ==16 ~ 3,
RACECEN1 ==3 ~ 4,
RACECEN1 ==4 ~ 4,
RACECEN1 == 5 ~ 4,
RACECEN1 ==6 ~ 4,
RACECEN1 ==7 ~ 4,
RACECEN1 ==8 ~ 4,
RACECEN1 ==9 ~ 4,
RACECEN1 == 10 ~ 4,
RACECEN1 ==11 ~ 4,
RACECEN1 ==12 ~ 4,
RACECEN1 ==13 ~ 4,
RACECEN1 ==14 ~ 4,
RACECEN1 ==15 ~ 4,
TRUE ~ 99)) -> Data
Data <- subset(Data, RACECEN1!= 99)
Data$PARTYID <- as.factor(Data$PARTYID)
Data$RACECEN1 <- as.factor(Data$RACECEN1)
Data$RACECEN1 <- recode_factor(Data$RACECEN1, '1' = "White", '2' = "Black", '3' = "Hispanic", '4' = "Other")
Data$PARTYID <- recode_factor(Data$PARTYID, '0' = "Democratic", '6' = "Republican", '7' = "Other")
str(Data)
head(Data)
usethis::use_git()
getwd()
getwd()
library(readxl)
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
detach("package:readxl", unload = TRUE)
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
View(Data)
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
is.na(Data)
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
sum(is.na(Data))
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
sum(is.na(Data))
new_DF <- DF[rowSums(is.na(DF)) > 0,]
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
sum(is.na(Data))
Missing <- Data[rowSums(is.na(DF)) > 0,]
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
sum(is.na(Data))
Missing <- Data[rowSums(is.na(Data)) > 0,]
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
sum(is.na(Data))
Missing <- Data[rowSums(is.na(Data)) > 0,]
Missing
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
sum(is.na(Data))
Missing <- Data[rowSums(is.na(Data)) > 0,]
summary(Missing)
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
sum(is.na(Data))
Missing <- Data[rowSums(is.na(Data)) > 0,]
Missing
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv")
sum(is.na(Data))
Data[rowSums(is.na(Data)) > 0,]
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv", na.strings = "")
sum(is.na(Data))
Data[rowSums(is.na(Data)) > 0,]
library(psych)
library(psych)
describe(Data)
View(Data)
library(dplyr)
str(Data) #checking for numeric status
Data <- Data %>%
filter_if(Data, is.numeric, all_vars((.) != 0))
library(dplyr)
str(Data) #checking for numeric status
Data <- Data %>%
rowwise() %>%
filter(any(c_across(everything(.)) == 0))
library(dplyr)
str(Data) #checking for numeric status
Data <- Data %>%
filter_if(Data, is.numeric, all_vars((.) != 0))
library(dplyr)
str(Data) #checking for numeric status
Data <- Data[apply(Data!=0, 1, all),]
library(psych)
describe(Data)
Data <- read.csv ("C:/Users/matts/Desktop/WebsiteData/SelfEsteem Data/data.csv", na.strings = "")
sum(is.na(Data))
library(psych)
str(Data) #checking for numeric status
Data_new <- Data[apply(Data!=0, 1, all),]
#Get means, sd, and range
describe(Data_new)
Data_new %>%
count(Data_new$age)
Data_new %>%
count(Data_new$age)
Data_new <- Data_new %>%
filter(between(age, 18, 100))
Data_new <- Data_new %>%
filter(between(age, 18, 100))
Data_new <- Data_new %>%
filter(between(age, 18, 100))
describe(Data_new)
Data_new <- Data_new %>%
filter(between(age, 18, 100))
describe(Data_new)
Data_new %>%
count(Data$age)
Data_new <- Data_new %>%
filter(between(age, 18, 100))
describe(Data_new)
Data %>%
count(Data$age)
Data_new <- Data_new %>%
filter(between(age, 18, 100))
describe(Data_new)
Data_new <- Data_new %>%
filter(between(age, 18, 100))
describe(Data_new)
Data_new %>%
count(Data_new$gender)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
View(Data_new)
library(Hmisc)
Correlation <- rcorr(Data_new[, 1:10])
library(Hmisc)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(M, p.mat = testRes$p, method = 'circle', type = 'lower', insig='blank',
order = 'AOE', diag = FALSE)$corrPos -> p1
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(Correlation, p.mat = testRes$p, method = 'circle', type = 'upper', insig='blank',
order = 'AOE', diag = FALSE)$corrPos -> p1
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(Correlation, p.mat = Correlation$p, method = 'circle', type = 'upper', insig='blank',
order = 'AOE', diag = FALSE)$corrPos -> p1
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(Correlation, p.mat = Correlation$p, method = 'circle', type = 'upper', insig='blank',
order = 'AOE', diag = FALSE) -> p1
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(Correlation$r, p.mat = Correlation$p, method = 'circle', type = 'upper', insig='blank',
order = 'AOE', diag = FALSE) -> p1
text(p1$x, p1$y, round(p1$corr, 2))
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(Correlation$r, p.mat = Correlation$p, method = 'circle', type = 'upper', insig='blank',
order = 'AOE', diag = FALSE)$corrPos -> p1
text(p1$x, p1$y, round(p1$corr, 2))
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(Correlation$r, p.mat = Correlation$p, method = 'circle', type = 'upper', insig='blank',
diag = FALSE)$corrPos -> p1
text(p1$x, p1$y, round(p1$corr, 2))
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(Correlation$r, p.mat = Correlation$p, method = 'circle', type = 'upper', insig='blank',
diag = FALSE)$corrPos -> p1
text(p1$x, p1$y, round(p1$corr, 2), size = 4)
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(Correlation$r, p.mat = Correlation$p, method = 'circle', type = 'upper', insig='blank',
diag = FALSE)$corrPos -> p1
text(p1$x, p1$y, round(p1$corr, 2), size = 2)
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(Correlation$r, p.mat = Correlation$p, method = 'circle', type = 'upper', insig='blank',
diag = FALSE)$corrPos -> p1
text(p1$x, p1$y, round(p1$corr, 2), size = 2)
corrplot.mixed(Correlation)
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot(Correlation$r, p.mat = Correlation$p, method = 'circle', type = 'upper', insig='blank',
diag = FALSE)$corrPos -> p1
text(p1$x, p1$y, round(p1$corr, 2), size = 2)
corrplot.mixed(Correlation$r)
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot.mixed(Correlation$r, tl.pos = 'lt')
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot.mixed(Correlation$r, tl.pos = 'lt', diag = 'l')
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot.mixed(Correlation$r, tl.pos = 'lt', diag = 'u')
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot.mixed(Correlation$r, tl.pos = 'lt', bg = "red")
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot.mixed(Correlation$r, tl.pos = 'lt', bg = "black")
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot.mixed(Correlation$r, tl.pos = 'lt', bg = "navy")
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot.mixed(Correlation$r, tl.pos = 'lt', plotCI = 'square')
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot.mixed(Correlation$r, tl.pos = 'lt', plotCI = "square")
library(Hmisc)
library(corrplot)
Correlation <- rcorr(as.matrix(Data_new[, 1:10]))
Correlation
corrplot.mixed(Correlation$r, tl.pos = 'lt')
library(lavaan)
SEM1Fac <- 'SE =~ Q1 + Q2 + Q3 + Q4 + Q5 + Q6 + Q7 + Q8 + Q9 + Q10'
fitSEM1 <- sem(SEM1Fac, Data_new, estimator = "MLR")
library(lavaan)
SEM1Fac <- 'SE =~ Q1 + Q2 + Q3 + Q4 + Q5 + Q6 + Q7 + Q8 + Q9 + Q10'
fitSEM1 <- sem(SEM1Fac, Data_new, estimator = "MLR")
summary(fitSEM1, standardized = TRUE, fit.measures = TRUE)
library(lavaan)
SEM1Fac <- 'SE =~ Q1 + Q2 + Q3 + Q4 + Q5 + Q6 + Q7 + Q8 + Q9 + Q10'
fitSEM1 <- sem(SEM1Fac, Data_new, estimator = "MLR")
summary(fitSEM1, standardized = TRUE)
library(lavaan)
SEM1Fac <- 'SE =~ Q1 + Q2 + Q3 + Q4 + Q5 + Q6 + Q7 + Q8 + Q9 + Q10'
fitSEM1 <- sem(SEM1Fac, Data_new, estimator = "MLR")
summary(fitSEM1, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM1, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
install.packages("semPlot")
library(semPlot)
semPaths(fitSEM1, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
SEM1.8Fac <- 'SE =~ Q1 + Q2 + Q3 + Q5 + Q6 + Q7 + Q9 + Q10'
fitSEM1.8 <- sem(SEM1Fac, Data_new, estimator = "MLR")
summary(fitSEM1.8, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM1.8, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
library(lavaan)
library(semPlot)
SEM1Fac <- 'SE =~ Q1 + Q2 + Q3 + Q4 + Q5 + Q6 + Q7 + Q8 + Q9 + Q10'
fitSEM1 <- sem(SEM1Fac, Data_new, estimator = "MLR")
summary(fitSEM1, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM1, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
SEM1.8Fac <- 'SE =~ Q1 + Q2 + Q3 + Q5 + Q6 + Q7 + Q9 + Q10'
fitSEM1.8 <- sem(SEM1.8Fac, Data_new, estimator = "MLR")
summary(fitSEM1.8, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM1.8, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
SEM2Fac <- 'PosSE =~ Q1 + Q2 + Q4 + Q6 + Q7
NegSE =~ Q3 + Q5 + Q8 + Q9 + Q10'
fitSEM2 <- sem(SEM2Fac, Data_new, estimator = "MLR")
summary(fitSEM2, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM2, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
SEM2Fac <- 'PosSE =~ Q1 + Q2 + Q4 + Q6 + Q7
NegSE =~ Q3 + Q5 + Q8 + Q9 + Q10
GSE ~ PosSE + NegSE'
fitSEM2 <- sem(SEM2Fac, Data_new, estimator = "MLR")
SEM2Fac <- 'PosSE =~ Q1 + Q2 + Q4 + Q6 + Q7
NegSE =~ Q3 + Q5 + Q8 + Q9 + Q10
GSE =~ PosSE + NegSE'
fitSEM2 <- sem(SEM2Fac, Data_new, estimator = "MLR")
summary(fitSEM2, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM2, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
SEM2Fac <- 'PosSE =~ Q1 + Q2 + Q4 + Q6 + Q7
NegSE =~ Q3 + Q5 + Q8 + Q9 + Q10
GSE ~ PosSE + NegSE'
fitSEM2 <- sem(SEM2Fac, Data_new, estimator = "MLR")
SEM2Fac <- 'PosSE =~ Q1 + Q2 + Q4 + Q6 + Q7
NegSE =~ Q3 + Q5 + Q8 + Q9 + Q10'
fitSEM2 <- sem(SEM2Fac, Data_new, estimator = "MLR")
summary(fitSEM2, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM2, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
Data_new <- Data_new %>%
filter(between(age, 10, 100))
describe(Data_new)
Data_new %>%
count(Data_new$gender)
library(lavaan)
library(semPlot)
SEM1Fac <- 'SE =~ Q1 + Q2 + Q3 + Q4 + Q5 + Q6 + Q7 + Q8 + Q9 + Q10'
fitSEM1 <- sem(SEM1Fac, Data_new, estimator = "MLR")
summary(fitSEM1, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM1, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
Data_new <- Data_new %>%
filter(between(age, 18, 100))
describe(Data_new)
Data_new %>%
count(Data_new$gender)
library(lavaan)
library(semPlot)
SEM1Fac <- 'SE =~ Q1 + Q2 + Q4 + Q6 + Q7'
fitSEM1 <- sem(SEM1Fac, Data_new, estimator = "MLR")
summary(fitSEM1, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM1, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
Data_new <- Data_new %>%
filter(between(age, 18, 100))
describe(Data_new)
Data_new %>%
count(Data_new$gender)
library(lavaan)
library(semPlot)
SEM1Fac <- 'SE =~ Q1 + Q2 + Q4 + Q6 + Q7'
fitSEM1 <- sem(SEM1Fac, Data_new, estimator = "MLR")
summary(fitSEM1, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM1, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
library(lavaan)
library(semPlot)
SEM1Fac <- 'SE =~ Q1 + Q2 + Q3 + Q4 + Q5 + Q6 + Q7 + Q8 + Q9 + Q10'
fitSEM1 <- sem(SEM1Fac, Data_new, estimator = "MLR")
summary(fitSEM1, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM1, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
View(Data_new)
Data_new <- Data_new %>%
filter(gender != "3")
library(lavaan)
library(semPlot)
Data_new <- Data_new %>%
filter(gender != "3")
SEM1Fac <- 'SE =~ Q1 + Q2 + Q3 + Q4 + Q5 + Q6 + Q7 + Q8 + Q9 + Q10'
fitSEM1 <- sem(SEM1Fac, Data_new, estimator = "MLR")
summary(fitSEM1, standardized = TRUE, fit.measures = TRUE)
semPaths(fitSEM1, what = "std", edge.label.cex = 0.7, esize = 1,
intercepts = FALSE,rotation = 4, edge.color = 1, asize = 2.5,
sizeMan = 5, mar = c(1, 1.5, 1.5, 3), fade = FALSE)
Configural <- sem(SEM1Fac, group = "gender", data = Data_new,
estimator = "MLR")
Configural <- sem(SEM1Fac, group = "gender", data = Data_new,
estimator = "MLR")
summary(Configural)
Configural <- sem(SEM1Fac, group = "gender", data = Data_new,
estimator = "MLR")
summary(Configural, standardized = TRUE, fit.measures = TRUE)
Metric <- sem(SEM1Fac, group = "gender", group.equal = c("loadings"),
data = Data_new, estimator = "MLR")
summary(Metric, standardized = TRUE, fit.measures = TRUE)
Metric <- sem(SEM1Fac, group = "gender", group.equal = c("loadings"),
data = Data_new, estimator = "MLR")
summary(Metric, standardized = FALSE, fit.measures = TRUE)
Metric <- sem(SEM1Fac, group = "gender", group.equal = c("loadings"),
data = Data_new, estimator = "MLR")
summary(Metric, standardized = TRUE, fit.measures = TRUE)
Scalar <- sem(SEM1Fac, group = "gender", group.equal = c("loadings", "intercepts"), data = Data_new, estimator = "MLR")
summary(Scalar, standardized = TRUE, fit.measures = TRUE)
Strict <- sem(SEM1Fac, group = "gender", group.equal = c("loadings", "intercepts", "residuals"), data = Data_new, estimator = "MLR")
summary(Strict, standardized = TRUE, fit.measures = TRUE)
compareFit(Configural, Metric)
install.packages("semTools")
library(semTools)
compareFit(Configural, Metric)
library(semTools)
summary(compareFit(Configural, Metric))
load("C:/Users/matts/OneDrive/Desktop/002 Matt Desktop/Website Code/Matt's Portfolio Website Code/.RData")
View(Data)
