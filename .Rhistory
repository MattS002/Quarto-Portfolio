coach == "yes" ~ "yes",
coach == "my head" ~ "no"))
TurnData$Coach <- as.factor(TurnData$Coach)
str(TurnData)
library(ggplot2)
Descriptives <- describe(TurnData)
Descriptives
sum(is.na(TurnData))
library(survival)
library(survminer)
library(lubridate)
# Create a censor indicator variable that is 1 if the employee has left and 0 otherwise
TurnData <-
TurnData %>%
dplyr::mutate(
CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
summary(SurvProb)
SurvProbcalc <-
tibble::tibble(
time = SurvProb$time,
n.risk = SurvProb$n.risk,
n.censor = SurvProb$n.censor,
n.event = SurvProb$n.event,
survival = SurvProb$surv
)
sum(SurvProbcalc$n.event)
sum(SurvProbcalc$n.censor)
min(which(SurvProbcalc$n.censor != 0))
survminer::ggsurvplot(
SurvProb,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
xlab = "Months since Hire",
ylab = "Probability of Staying at Company"
)
SurvProb_Coach <- survival::survfit(surv_object ~ Coach, data = TurnData)
summary(SurvProb_Coach)
survminer::ggsurvplot(
SurvProb_Coach,
pval = TRUE,
conf.int = TRUE,
xlab = "Months since Hire",
ylab = "Probability of Staying at Company"
)
SurvProb_Way <- survival::survfit(surv_object ~ way, data = TurnData)
#summary(SurvProb_Sup)
survminer::ggsurvplot(
SurvProb_Way,
pval = TRUE,
conf.int = TRUE,
xlab = "Months since Hire",
ylab = "Probability of Staying at Company"
)
IntModel <- survival::survfit(surv_object ~ Coach + way, data = TurnData)
survminer::ggsurvplot(IntModel,
pval = TRUE,
xlab = "Months since Hire",
ylab = "Probability of Staying at Company")
CoxMod <- survival::coxph(
surv_object ~  Coach + way + selfcontrol + Coach*way,
data = TurnData)
summary(CoxMod)
IntModel <- survival::survfit(surv_object ~ Coach + way, data = TurnData)
survminer::ggsurvplot(IntModel,
pval = TRUE,
xlab = "Months since Hire",
ylab = "Probability of Staying at Company")
IntModel
view(IntModel)
print(IntModel)
IntModel <- survival::survfit(surv_object ~ Coach + way, data = TurnData)
survminer::ggsurvplot(IntModel,
pval = TRUE,
xlab = "Months since Hire",
ylab = "Probability of Staying at Company")
library(rstatix)
Repeated <- ezANOVA(DataLong, dv = score, wid = subjid, within = list, between = cond, detailed = TRUE, return_aov = TRUE, type = 3)
DataLong %>%
group_by(list, cond) %>%
summarise(n = n(), sd = sd(score), var = var(score))
library(readxl)
library(dplyr)
library(ez)
library(tidyr)
library(tidyverse)
Data <- read_excel("C:/Users/matts/Desktop/Website Code/Matt's Portfolio Website Code/Portfolio pages/Data/Repeated Measures Data 2.xlsx")
head(Data)
#Need to convert data set to long format - it is currently in wide format
#Changing data to long format - we want to gather by list as this is the repeated variable
DataLong <- Data %>%
gather(key = "list", value = "score", list1, list2)
DataLong$list <- as.factor(DataLong$list)
DataLong$cond <- as.factor(DataLong$cond)
DataLong$subjid <- as.factor(DataLong$subjid)
head(DataLong)
DataLong %>%
group_by(list, cond) %>%
summarise(n = n(), sd = sd(score), var = var(score))
library(rstatix)
Repeated <- ezANOVA(DataLong, dv = score, wid = subjid, within = list, between = cond, detailed = TRUE, return_aov = TRUE, type = 3)
Repeated
#Additional ways to estimate this model
#Model <- aov(score ~ list*cond + Error(subjid/list), DataLong)
#summary(Model)
#SphereCorr <- anova_test(DataLong, dv = score, wid = subjid, within = list, between = cond)
#SphereCorr
library(ggpubr)
bxp <- ggboxplot(DataLong, x = "list", y = "score",color = "cond", palette = "jco")
bxp
library(emmeans)
#the pairs function comes from the emmeans package - verbiage should feel similar to emmeans commands in SPSS
SimpleCond <- emmeans(Model, pairwise ~ cond, adjust = "bonferroni")
wd()
getwd()
library(readxl)
library(dplyr)
library(ez)
library(tidyr)
library(tidyverse)
Data <- read_excel("Portfolio pages/Data/Repeated Measures Data 2.xlsx")
library(readxl)
library(dplyr)
library(ez)
library(tidyr)
library(tidyverse)
Data <- read_excel("Portfolio pages/Data/Repeated Measures Data 2.xlsx")
setwd()
setwd("C:/Users/matts/Desktop/Website Code/Matt's Portfolio Website Code/Portfolio pages/Data")
library(readxl)
library(dplyr)
library(ez)
library(tidyr)
library(tidyverse)
Data <- read_excel("Repeated Measures Data 2.xlsx")
library(readxl)
library(dplyr)
library(ez)
library(tidyr)
library(tidyverse)
Data <- read_excel(Repeated Measures Data 2.xlsx)
library(readxl)
library(dplyr)
library(ez)
library(tidyr)
library(tidyverse)
Data <- read_excel('Repeated Measures Data 2.xlsx')
library(readxl)
library(dplyr)
library(ez)
library(tidyr)
library(tidyverse)
Data <- read_excel("Repeated Measures Data 2.xlsx")
library(readxl)
library(dplyr)
library(ez)
library(tidyr)
library(tidyverse)
Data <- read_excel("/Repeated Measures Data 2.xlsx")
library(readxl)
library(dplyr)
library(ez)
library(tidyr)
library(tidyverse)
Data <- read_excel("C:/Users/matts/Desktop/Website Code/Matt's Portfolio Website Code/Portfolio pages/Data/Repeated Measures Data 2.xlsx")
head(Data)
#Need to convert data set to long format - it is currently in wide format
#Changing data to long format - we want to gather by list as this is the repeated variable
DataLong <- Data %>%
gather(key = "list", value = "score", list1, list2)
DataLong$list <- as.factor(DataLong$list)
DataLong$cond <- as.factor(DataLong$cond)
DataLong$subjid <- as.factor(DataLong$subjid)
head(DataLong)
library(readxl)
library(dplyr)
library(ez)
library(tidyr)
library(tidyverse)
Data <- read_excel("C:/Users/matts/Desktop/Website Code/Matt's Portfolio Website Code/Portfolio pages/Data/Repeated Measures Data 2.xlsx")
head(Data)
#Need to convert data set to long format - it is currently in wide format
#Changing data to long format - we want to gather by list as this is the repeated variable
DataLong <- Data %>%
gather(key = "list", value = "score", list1, list2)
DataLong$list <- as.factor(DataLong$list)
DataLong$cond <- as.factor(DataLong$cond)
DataLong$subjid <- as.factor(DataLong$subjid)
head(DataLong)
mean(MasterData$Age)
sd(MasterData$Age)
MasterData %>%
group_by(Veteran) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
MasterData %>%
group_by(Disability) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
MasterData %>%
group_by(Race.Ethnicity) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
MasterData %>%
group_by(Gender.Identity) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
MasterData %>%
group_by(Sexual.Orientation) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
MasterData %>%
group_by(Education) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
library(lavaan)
CFA1  <- 'Engage =~ E1 + E2 + E3 + E4 + E5 + E6 + E7 + E8 + E9 + E10 + E11 + E12 + E13 + E14 + E15 + E16 + E17 + E18 + E19'
CFAOut <- cfa(CFA1, data=MasterData)
summary(CFAOut, fit.measures=TRUE, standardized=TRUE)
?summary()
library(readxl)
library(dplyr)
library(tidyverse)
library(psych)
TurnData <- read.csv("C:/Users/matts/Desktop/Website Code/Matt's Portfolio Website Code/Portfolio pages/Data/turnover.csv")
#Need to change string data to factors
TurnData$event <- factor(TurnData$event, labels = c("no", "yes"))
names <- c('gender', 'industry', 'profession', 'traffic', 'coach', 'head_gender', 'greywage', 'way')
TurnData[,names] <- lapply(TurnData[,names], factor)
TurnData <- TurnData  %>%
dplyr::mutate(
Coach = dplyr::case_when(
coach == "no" ~ "no",
coach == "yes" ~ "yes",
coach == "my head" ~ "no"))
TurnData$Coach <- as.factor(TurnData$Coach)
str(TurnData)
library(ggplot2)
Descriptives <- describe(TurnData)
Descriptives
sum(is.na(TurnData))
library(survival)
library(survminer)
library(lubridate)
# Create a censor indicator variable that is 1 if the employee has left and 0 otherwise
TurnData <-
TurnData %>%
dplyr::mutate(
CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
summary(SurvProb, 10)
SurvProbcalc <-
tibble::tibble(
time = SurvProb$time,
n.risk = SurvProb$n.risk,
n.censor = SurvProb$n.censor,
n.event = SurvProb$n.event,
survival = SurvProb$surv
)
sum(SurvProbcalc$n.event)
sum(SurvProbcalc$n.censor)
min(which(SurvProbcalc$n.censor != 0))
survminer::ggsurvplot(
SurvProb,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
xlab = "Months since Hire",
ylab = "Probability of Staying at Company"
)
SurvProb_Coach <- survival::survfit(surv_object ~ Coach, data = TurnData)
summary(SurvProb_Coach)
survminer::ggsurvplot(
SurvProb_Coach,
pval = TRUE,
conf.int = TRUE,
xlab = "Months since Hire",
ylab = "Probability of Staying at Company"
)
SurvProb_Way <- survival::survfit(surv_object ~ way, data = TurnData)
#summary(SurvProb_Sup)
survminer::ggsurvplot(
SurvProb_Way,
pval = TRUE,
conf.int = TRUE,
xlab = "Months since Hire",
ylab = "Probability of Staying at Company"
)
IntModel <- survival::survfit(surv_object ~ Coach + way, data = TurnData)
survminer::ggsurvplot(IntModel,
pval = TRUE,
xlab = "Months since Hire",
ylab = "Probability of Staying at Company")
CoxMod <- survival::coxph(
surv_object ~  Coach + way + selfcontrol + Coach*way,
data = TurnData)
summary(CoxMod)
library(survival)
library(survminer)
library(lubridate)
# Create a censor indicator variable that is 1 if the employee has left and 0 otherwise
TurnData <-
TurnData %>%
dplyr::mutate(
CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
summary(SurvProb[1:10,])
library(survival)
library(survminer)
library(lubridate)
# Create a censor indicator variable that is 1 if the employee has left and 0 otherwise
TurnData <-
TurnData %>%
dplyr::mutate(
CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
SurvProb[1:10,]
library(survival)
library(survminer)
library(lubridate)
# Create a censor indicator variable that is 1 if the employee has left and 0 otherwise
TurnData <-
TurnData %>%
dplyr::mutate(
CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
SurvProb[c[1:10]]
install.packages("ggfortify")
library(survival)
library(survminer)
library(lubridate)
library(ggfortify)
# Create a censor indicator variable that is 1 if the employee has left and 0 otherwise
TurnData <-
TurnData %>%
dplyr::mutate(
CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
fortify(SurvProb)
SurvProbcalc <-
tibble::tibble(
time = SurvProb$time,
n.risk = SurvProb$n.risk,
n.censor = SurvProb$n.censor,
n.event = SurvProb$n.event,
survival = SurvProb$surv
)
sum(SurvProbcalc$n.event)
sum(SurvProbcalc$n.censor)
min(which(SurvProbcalc$n.censor != 0))
library(survival)
library(survminer)
library(lubridate)
library(ggfortify)
# Create a censor indicator variable that is 1 if the employee has left and 0 otherwise
TurnData <-
TurnData %>%
dplyr::mutate(
CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
summary(fortify(SurvProb), 10)
SurvProbcalc <-
tibble::tibble(
time = SurvProb$time,
n.risk = SurvProb$n.risk,
n.censor = SurvProb$n.censor,
n.event = SurvProb$n.event,
survival = SurvProb$surv
)
sum(SurvProbcalc$n.event)
sum(SurvProbcalc$n.censor)
min(which(SurvProbcalc$n.censor != 0))
library(survival)
library(survminer)
library(lubridate)
library(ggfortify)
# Create a censor indicator variable that is 1 if the employee has left and 0 otherwise
TurnData <-
TurnData %>%
dplyr::mutate(
CENSOR = dplyr::case_when(
event == "no" ~ 0,
TRUE ~ 1))
# Create a survival object
surv_object <- survival::Surv(
event = TurnData$CENSOR,
time = TurnData$stag
)
# Estimate survival probabilities using Kaplan Meier estimator
SurvProb <- survival::survfit(
surv_object ~ 1,
data = TurnData)
head(fortify(SurvProb),10)
SurvProbcalc <-
tibble::tibble(
time = SurvProb$time,
n.risk = SurvProb$n.risk,
n.censor = SurvProb$n.censor,
n.event = SurvProb$n.event,
survival = SurvProb$surv
)
sum(SurvProbcalc$n.event)
sum(SurvProbcalc$n.censor)
min(which(SurvProbcalc$n.censor != 0))
SurvProb_Coach <- survival::survfit(surv_object ~ Coach, data = TurnData)
head(fortify(SurvProb_Coach), 10)
install.packages("usethis")
usethis::use_git_config(user.name = "MattSwan", user.email = "mattswnsn53@gmail.com")
usethis::use_git_config(user.name = "MattSwan", user.email = "mattswnsn53@gmail.com")
library(readxl)
library(dplyr)
Data <- read_excel("C:/Users/matts/Desktop/WebsiteData/Data/Religion Data 2.xlsx")
Data <- subset(Data, PARTYID!= 1 & PARTYID!= 2 & PARTYID!= 3 & PARTYID!= 4 & PARTYID!= 5 & PARTYID!= 9)
Data <- subset(Data, ATTEND!= 9)
Data %>%
mutate(RACECEN1 = case_when(RACECEN1 == 1 ~ 1,
RACECEN1 ==2 ~ 2,
RACECEN1 ==16 ~ 3,
RACECEN1 ==3 ~ 4,
RACECEN1 ==4 ~ 4,
RACECEN1 == 5 ~ 4,
RACECEN1 ==6 ~ 4,
RACECEN1 ==7 ~ 4,
RACECEN1 ==8 ~ 4,
RACECEN1 ==9 ~ 4,
RACECEN1 == 10 ~ 4,
RACECEN1 ==11 ~ 4,
RACECEN1 ==12 ~ 4,
RACECEN1 ==13 ~ 4,
RACECEN1 ==14 ~ 4,
RACECEN1 ==15 ~ 4,
TRUE ~ 99)) -> Data
Data <- subset(Data, RACECEN1!= 99)
Data$PARTYID <- as.factor(Data$PARTYID)
Data$RACECEN1 <- as.factor(Data$RACECEN1)
Data$RACECEN1 <- recode_factor(Data$RACECEN1, '1' = "White", '2' = "Black", '3' = "Hispanic", '4' = "Other")
Data$PARTYID <- recode_factor(Data$PARTYID, '0' = "Democratic", '6' = "Republican", '7' = "Other")
str(Data)
head(Data)
usethis::use_git()
getwd()
